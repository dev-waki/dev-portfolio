{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Jason Anderson @diurnalist\n*/\n\n\"use strict\";\n\nconst mime = require(\"mime-types\");\nconst {\n  basename,\n  extname\n} = require(\"path\");\nconst util = require(\"util\");\nconst Chunk = require(\"./Chunk\");\nconst Module = require(\"./Module\");\nconst {\n  parseResource\n} = require(\"./util/identifier\");\n\n/** @typedef {import(\"./ChunkGraph\")} ChunkGraph */\n/** @typedef {import(\"./ChunkGraph\").ModuleId} ModuleId */\n/** @typedef {import(\"./Compilation\").AssetInfo} AssetInfo */\n/** @typedef {import(\"./Compilation\").PathData} PathData */\n/** @typedef {import(\"./Compiler\")} Compiler */\n\nconst REGEXP = /\\[\\\\*([\\w:]+)\\\\*\\]/gi;\n\n/**\n * @param {string | number} id id\n * @returns {string | number} result\n */\nconst prepareId = id => {\n  if (typeof id !== \"string\") return id;\n  if (/^\"\\s\\+*.*\\+\\s*\"$/.test(id)) {\n    const match = /^\"\\s\\+*\\s*(.*)\\s*\\+\\s*\"$/.exec(id);\n    return `\" + (${/** @type {string[]} */match[1]} + \"\").replace(/(^[.-]|[^a-zA-Z0-9_-])+/g, \"_\") + \"`;\n  }\n  return id.replace(/(^[.-]|[^a-zA-Z0-9_-])+/g, \"_\");\n};\n\n/**\n * @callback ReplacerFunction\n * @param {string} match\n * @param {string | undefined} arg\n * @param {string} input\n */\n\n/**\n * @param {ReplacerFunction} replacer replacer\n * @param {((arg0: number) => string) | undefined} handler handler\n * @param {AssetInfo | undefined} assetInfo asset info\n * @param {string} hashName hash name\n * @returns {ReplacerFunction} hash replacer function\n */\nconst hashLength = (replacer, handler, assetInfo, hashName) => {\n  /** @type {ReplacerFunction} */\n  const fn = (match, arg, input) => {\n    let result;\n    const length = arg && Number.parseInt(arg, 10);\n    if (length && handler) {\n      result = handler(length);\n    } else {\n      const hash = replacer(match, arg, input);\n      result = length ? hash.slice(0, length) : hash;\n    }\n    if (assetInfo) {\n      assetInfo.immutable = true;\n      if (Array.isArray(assetInfo[hashName])) {\n        assetInfo[hashName] = [...assetInfo[hashName], result];\n      } else if (assetInfo[hashName]) {\n        assetInfo[hashName] = [assetInfo[hashName], result];\n      } else {\n        assetInfo[hashName] = result;\n      }\n    }\n    return result;\n  };\n  return fn;\n};\n\n/** @typedef {(match: string, arg?: string, input?: string) => string} Replacer */\n\n/**\n * @param {string | number | null | undefined | (() => string | number | null | undefined)} value value\n * @param {boolean=} allowEmpty allow empty\n * @returns {Replacer} replacer\n */\nconst replacer = (value, allowEmpty) => {\n  /** @type {Replacer} */\n  const fn = (match, arg, input) => {\n    if (typeof value === \"function\") {\n      value = value();\n    }\n    if (value === null || value === undefined) {\n      if (!allowEmpty) {\n        throw new Error(`Path variable ${match} not implemented in this context: ${input}`);\n      }\n      return \"\";\n    }\n    return `${value}`;\n  };\n  return fn;\n};\nconst deprecationCache = new Map();\nconst deprecatedFunction = (() => () => {})();\n/**\n * @param {Function} fn function\n * @param {string} message message\n * @param {string} code code\n * @returns {function(...any[]): void} function with deprecation output\n */\nconst deprecated = (fn, message, code) => {\n  let d = deprecationCache.get(message);\n  if (d === undefined) {\n    d = util.deprecate(deprecatedFunction, message, code);\n    deprecationCache.set(message, d);\n  }\n  return (...args) => {\n    d();\n    return fn(...args);\n  };\n};\n\n/** @typedef {string | function(PathData, AssetInfo=): string} TemplatePath */\n\n/**\n * @param {TemplatePath} path the raw path\n * @param {PathData} data context data\n * @param {AssetInfo | undefined} assetInfo extra info about the asset (will be written to)\n * @returns {string} the interpolated path\n */\nconst replacePathVariables = (path, data, assetInfo) => {\n  const chunkGraph = data.chunkGraph;\n\n  /** @type {Map<string, Function>} */\n  const replacements = new Map();\n\n  // Filename context\n  //\n  // Placeholders\n  //\n  // for /some/path/file.js?query#fragment:\n  // [file] - /some/path/file.js\n  // [query] - ?query\n  // [fragment] - #fragment\n  // [base] - file.js\n  // [path] - /some/path/\n  // [name] - file\n  // [ext] - .js\n  if (typeof data.filename === \"string\") {\n    // check that filename is data uri\n    const match = data.filename.match(/^data:([^;,]+)/);\n    if (match) {\n      const ext = mime.extension(match[1]);\n      const emptyReplacer = replacer(\"\", true);\n      // \"XXXX\" used for `updateHash`, so we don't need it here\n      const contentHash = data.contentHash && !/X+/.test(data.contentHash) ? data.contentHash : false;\n      const baseReplacer = contentHash ? replacer(contentHash) : emptyReplacer;\n      replacements.set(\"file\", emptyReplacer);\n      replacements.set(\"query\", emptyReplacer);\n      replacements.set(\"fragment\", emptyReplacer);\n      replacements.set(\"path\", emptyReplacer);\n      replacements.set(\"base\", baseReplacer);\n      replacements.set(\"name\", baseReplacer);\n      replacements.set(\"ext\", replacer(ext ? `.${ext}` : \"\", true));\n      // Legacy\n      replacements.set(\"filebase\", deprecated(baseReplacer, \"[filebase] is now [base]\", \"DEP_WEBPACK_TEMPLATE_PATH_PLUGIN_REPLACE_PATH_VARIABLES_FILENAME\"));\n    } else {\n      const {\n        path: file,\n        query,\n        fragment\n      } = parseResource(data.filename);\n      const ext = extname(file);\n      const base = basename(file);\n      const name = base.slice(0, base.length - ext.length);\n      const path = file.slice(0, file.length - base.length);\n      replacements.set(\"file\", replacer(file));\n      replacements.set(\"query\", replacer(query, true));\n      replacements.set(\"fragment\", replacer(fragment, true));\n      replacements.set(\"path\", replacer(path, true));\n      replacements.set(\"base\", replacer(base));\n      replacements.set(\"name\", replacer(name));\n      replacements.set(\"ext\", replacer(ext, true));\n      // Legacy\n      replacements.set(\"filebase\", deprecated(replacer(base), \"[filebase] is now [base]\", \"DEP_WEBPACK_TEMPLATE_PATH_PLUGIN_REPLACE_PATH_VARIABLES_FILENAME\"));\n    }\n  }\n\n  // Compilation context\n  //\n  // Placeholders\n  //\n  // [fullhash] - data.hash (3a4b5c6e7f)\n  //\n  // Legacy Placeholders\n  //\n  // [hash] - data.hash (3a4b5c6e7f)\n  if (data.hash) {\n    const hashReplacer = hashLength(replacer(data.hash), data.hashWithLength, assetInfo, \"fullhash\");\n    replacements.set(\"fullhash\", hashReplacer);\n\n    // Legacy\n    replacements.set(\"hash\", deprecated(hashReplacer, \"[hash] is now [fullhash] (also consider using [chunkhash] or [contenthash], see documentation for details)\", \"DEP_WEBPACK_TEMPLATE_PATH_PLUGIN_REPLACE_PATH_VARIABLES_HASH\"));\n  }\n\n  // Chunk Context\n  //\n  // Placeholders\n  //\n  // [id] - chunk.id (0.js)\n  // [name] - chunk.name (app.js)\n  // [chunkhash] - chunk.hash (7823t4t4.js)\n  // [contenthash] - chunk.contentHash[type] (3256u3zg.js)\n  if (data.chunk) {\n    const chunk = data.chunk;\n    const contentHashType = data.contentHashType;\n    const idReplacer = replacer(chunk.id);\n    const nameReplacer = replacer(chunk.name || chunk.id);\n    const chunkhashReplacer = hashLength(replacer(chunk instanceof Chunk ? chunk.renderedHash : chunk.hash), \"hashWithLength\" in chunk ? chunk.hashWithLength : undefined, assetInfo, \"chunkhash\");\n    const contenthashReplacer = hashLength(replacer(data.contentHash || contentHashType && chunk.contentHash && chunk.contentHash[contentHashType]), data.contentHashWithLength || (\"contentHashWithLength\" in chunk && chunk.contentHashWithLength ? chunk.contentHashWithLength[(/** @type {string} */contentHashType)] : undefined), assetInfo, \"contenthash\");\n    replacements.set(\"id\", idReplacer);\n    replacements.set(\"name\", nameReplacer);\n    replacements.set(\"chunkhash\", chunkhashReplacer);\n    replacements.set(\"contenthash\", contenthashReplacer);\n  }\n\n  // Module Context\n  //\n  // Placeholders\n  //\n  // [id] - module.id (2.png)\n  // [hash] - module.hash (6237543873.png)\n  //\n  // Legacy Placeholders\n  //\n  // [moduleid] - module.id (2.png)\n  // [modulehash] - module.hash (6237543873.png)\n  if (data.module) {\n    const module = data.module;\n    const idReplacer = replacer(() => prepareId(module instanceof Module ? (/** @type {ModuleId} */\n    /** @type {ChunkGraph} */chunkGraph.getModuleId(module)) : module.id));\n    const moduleHashReplacer = hashLength(replacer(() => module instanceof Module ? /** @type {ChunkGraph} */\n    chunkGraph.getRenderedModuleHash(module, data.runtime) : module.hash), \"hashWithLength\" in module ? module.hashWithLength : undefined, assetInfo, \"modulehash\");\n    const contentHashReplacer = hashLength(replacer(/** @type {string} */data.contentHash), undefined, assetInfo, \"contenthash\");\n    replacements.set(\"id\", idReplacer);\n    replacements.set(\"modulehash\", moduleHashReplacer);\n    replacements.set(\"contenthash\", contentHashReplacer);\n    replacements.set(\"hash\", data.contentHash ? contentHashReplacer : moduleHashReplacer);\n    // Legacy\n    replacements.set(\"moduleid\", deprecated(idReplacer, \"[moduleid] is now [id]\", \"DEP_WEBPACK_TEMPLATE_PATH_PLUGIN_REPLACE_PATH_VARIABLES_MODULE_ID\"));\n  }\n\n  // Other things\n  if (data.url) {\n    replacements.set(\"url\", replacer(data.url));\n  }\n  if (typeof data.runtime === \"string\") {\n    replacements.set(\"runtime\", replacer(() => prepareId(/** @type {string} */data.runtime)));\n  } else {\n    replacements.set(\"runtime\", replacer(\"_\"));\n  }\n  if (typeof path === \"function\") {\n    path = path(data, assetInfo);\n  }\n  path = path.replace(REGEXP, (match, content) => {\n    if (content.length + 2 === match.length) {\n      const contentMatch = /^(\\w+)(?::(\\w+))?$/.exec(content);\n      if (!contentMatch) return match;\n      const [, kind, arg] = contentMatch;\n      const replacer = replacements.get(kind);\n      if (replacer !== undefined) {\n        return replacer(match, arg, path);\n      }\n    } else if (match.startsWith(\"[\\\\\") && match.endsWith(\"\\\\]\")) {\n      return `[${match.slice(2, -2)}]`;\n    }\n    return match;\n  });\n  return path;\n};\nconst plugin = \"TemplatedPathPlugin\";\nclass TemplatedPathPlugin {\n  /**\n   * Apply the plugin\n   * @param {Compiler} compiler the compiler instance\n   * @returns {void}\n   */\n  apply(compiler) {\n    compiler.hooks.compilation.tap(plugin, compilation => {\n      compilation.hooks.assetPath.tap(plugin, replacePathVariables);\n    });\n  }\n}\nmodule.exports = TemplatedPathPlugin;","map":{"version":3,"names":["mime","require","basename","extname","util","Chunk","Module","parseResource","REGEXP","prepareId","id","test","match","exec","replace","hashLength","replacer","handler","assetInfo","hashName","fn","arg","input","result","length","Number","parseInt","hash","slice","immutable","Array","isArray","value","allowEmpty","undefined","Error","deprecationCache","Map","deprecatedFunction","deprecated","message","code","d","get","deprecate","set","args","replacePathVariables","path","data","chunkGraph","replacements","filename","ext","extension","emptyReplacer","contentHash","baseReplacer","file","query","fragment","base","name","hashReplacer","hashWithLength","chunk","contentHashType","idReplacer","nameReplacer","chunkhashReplacer","renderedHash","contenthashReplacer","contentHashWithLength","module","getModuleId","moduleHashReplacer","getRenderedModuleHash","runtime","contentHashReplacer","url","content","contentMatch","kind","startsWith","endsWith","plugin","TemplatedPathPlugin","apply","compiler","hooks","compilation","tap","assetPath","exports"],"sources":["/home/wickliff/Desktop/dev-waki/portfolio2/node_modules/webpack/lib/TemplatedPathPlugin.js"],"sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Jason Anderson @diurnalist\n*/\n\n\"use strict\";\n\nconst mime = require(\"mime-types\");\nconst { basename, extname } = require(\"path\");\nconst util = require(\"util\");\nconst Chunk = require(\"./Chunk\");\nconst Module = require(\"./Module\");\nconst { parseResource } = require(\"./util/identifier\");\n\n/** @typedef {import(\"./ChunkGraph\")} ChunkGraph */\n/** @typedef {import(\"./ChunkGraph\").ModuleId} ModuleId */\n/** @typedef {import(\"./Compilation\").AssetInfo} AssetInfo */\n/** @typedef {import(\"./Compilation\").PathData} PathData */\n/** @typedef {import(\"./Compiler\")} Compiler */\n\nconst REGEXP = /\\[\\\\*([\\w:]+)\\\\*\\]/gi;\n\n/**\n * @param {string | number} id id\n * @returns {string | number} result\n */\nconst prepareId = id => {\n\tif (typeof id !== \"string\") return id;\n\n\tif (/^\"\\s\\+*.*\\+\\s*\"$/.test(id)) {\n\t\tconst match = /^\"\\s\\+*\\s*(.*)\\s*\\+\\s*\"$/.exec(id);\n\n\t\treturn `\" + (${\n\t\t\t/** @type {string[]} */ (match)[1]\n\t\t} + \"\").replace(/(^[.-]|[^a-zA-Z0-9_-])+/g, \"_\") + \"`;\n\t}\n\n\treturn id.replace(/(^[.-]|[^a-zA-Z0-9_-])+/g, \"_\");\n};\n\n/**\n * @callback ReplacerFunction\n * @param {string} match\n * @param {string | undefined} arg\n * @param {string} input\n */\n\n/**\n * @param {ReplacerFunction} replacer replacer\n * @param {((arg0: number) => string) | undefined} handler handler\n * @param {AssetInfo | undefined} assetInfo asset info\n * @param {string} hashName hash name\n * @returns {ReplacerFunction} hash replacer function\n */\nconst hashLength = (replacer, handler, assetInfo, hashName) => {\n\t/** @type {ReplacerFunction} */\n\tconst fn = (match, arg, input) => {\n\t\tlet result;\n\t\tconst length = arg && Number.parseInt(arg, 10);\n\n\t\tif (length && handler) {\n\t\t\tresult = handler(length);\n\t\t} else {\n\t\t\tconst hash = replacer(match, arg, input);\n\n\t\t\tresult = length ? hash.slice(0, length) : hash;\n\t\t}\n\t\tif (assetInfo) {\n\t\t\tassetInfo.immutable = true;\n\t\t\tif (Array.isArray(assetInfo[hashName])) {\n\t\t\t\tassetInfo[hashName] = [...assetInfo[hashName], result];\n\t\t\t} else if (assetInfo[hashName]) {\n\t\t\t\tassetInfo[hashName] = [assetInfo[hashName], result];\n\t\t\t} else {\n\t\t\t\tassetInfo[hashName] = result;\n\t\t\t}\n\t\t}\n\t\treturn result;\n\t};\n\n\treturn fn;\n};\n\n/** @typedef {(match: string, arg?: string, input?: string) => string} Replacer */\n\n/**\n * @param {string | number | null | undefined | (() => string | number | null | undefined)} value value\n * @param {boolean=} allowEmpty allow empty\n * @returns {Replacer} replacer\n */\nconst replacer = (value, allowEmpty) => {\n\t/** @type {Replacer} */\n\tconst fn = (match, arg, input) => {\n\t\tif (typeof value === \"function\") {\n\t\t\tvalue = value();\n\t\t}\n\t\tif (value === null || value === undefined) {\n\t\t\tif (!allowEmpty) {\n\t\t\t\tthrow new Error(\n\t\t\t\t\t`Path variable ${match} not implemented in this context: ${input}`\n\t\t\t\t);\n\t\t\t}\n\n\t\t\treturn \"\";\n\t\t}\n\n\t\treturn `${value}`;\n\t};\n\n\treturn fn;\n};\n\nconst deprecationCache = new Map();\nconst deprecatedFunction = (() => () => {})();\n/**\n * @param {Function} fn function\n * @param {string} message message\n * @param {string} code code\n * @returns {function(...any[]): void} function with deprecation output\n */\nconst deprecated = (fn, message, code) => {\n\tlet d = deprecationCache.get(message);\n\tif (d === undefined) {\n\t\td = util.deprecate(deprecatedFunction, message, code);\n\t\tdeprecationCache.set(message, d);\n\t}\n\treturn (...args) => {\n\t\td();\n\t\treturn fn(...args);\n\t};\n};\n\n/** @typedef {string | function(PathData, AssetInfo=): string} TemplatePath */\n\n/**\n * @param {TemplatePath} path the raw path\n * @param {PathData} data context data\n * @param {AssetInfo | undefined} assetInfo extra info about the asset (will be written to)\n * @returns {string} the interpolated path\n */\nconst replacePathVariables = (path, data, assetInfo) => {\n\tconst chunkGraph = data.chunkGraph;\n\n\t/** @type {Map<string, Function>} */\n\tconst replacements = new Map();\n\n\t// Filename context\n\t//\n\t// Placeholders\n\t//\n\t// for /some/path/file.js?query#fragment:\n\t// [file] - /some/path/file.js\n\t// [query] - ?query\n\t// [fragment] - #fragment\n\t// [base] - file.js\n\t// [path] - /some/path/\n\t// [name] - file\n\t// [ext] - .js\n\tif (typeof data.filename === \"string\") {\n\t\t// check that filename is data uri\n\t\tconst match = data.filename.match(/^data:([^;,]+)/);\n\t\tif (match) {\n\t\t\tconst ext = mime.extension(match[1]);\n\t\t\tconst emptyReplacer = replacer(\"\", true);\n\t\t\t// \"XXXX\" used for `updateHash`, so we don't need it here\n\t\t\tconst contentHash =\n\t\t\t\tdata.contentHash && !/X+/.test(data.contentHash)\n\t\t\t\t\t? data.contentHash\n\t\t\t\t\t: false;\n\t\t\tconst baseReplacer = contentHash ? replacer(contentHash) : emptyReplacer;\n\n\t\t\treplacements.set(\"file\", emptyReplacer);\n\t\t\treplacements.set(\"query\", emptyReplacer);\n\t\t\treplacements.set(\"fragment\", emptyReplacer);\n\t\t\treplacements.set(\"path\", emptyReplacer);\n\t\t\treplacements.set(\"base\", baseReplacer);\n\t\t\treplacements.set(\"name\", baseReplacer);\n\t\t\treplacements.set(\"ext\", replacer(ext ? `.${ext}` : \"\", true));\n\t\t\t// Legacy\n\t\t\treplacements.set(\n\t\t\t\t\"filebase\",\n\t\t\t\tdeprecated(\n\t\t\t\t\tbaseReplacer,\n\t\t\t\t\t\"[filebase] is now [base]\",\n\t\t\t\t\t\"DEP_WEBPACK_TEMPLATE_PATH_PLUGIN_REPLACE_PATH_VARIABLES_FILENAME\"\n\t\t\t\t)\n\t\t\t);\n\t\t} else {\n\t\t\tconst { path: file, query, fragment } = parseResource(data.filename);\n\n\t\t\tconst ext = extname(file);\n\t\t\tconst base = basename(file);\n\t\t\tconst name = base.slice(0, base.length - ext.length);\n\t\t\tconst path = file.slice(0, file.length - base.length);\n\n\t\t\treplacements.set(\"file\", replacer(file));\n\t\t\treplacements.set(\"query\", replacer(query, true));\n\t\t\treplacements.set(\"fragment\", replacer(fragment, true));\n\t\t\treplacements.set(\"path\", replacer(path, true));\n\t\t\treplacements.set(\"base\", replacer(base));\n\t\t\treplacements.set(\"name\", replacer(name));\n\t\t\treplacements.set(\"ext\", replacer(ext, true));\n\t\t\t// Legacy\n\t\t\treplacements.set(\n\t\t\t\t\"filebase\",\n\t\t\t\tdeprecated(\n\t\t\t\t\treplacer(base),\n\t\t\t\t\t\"[filebase] is now [base]\",\n\t\t\t\t\t\"DEP_WEBPACK_TEMPLATE_PATH_PLUGIN_REPLACE_PATH_VARIABLES_FILENAME\"\n\t\t\t\t)\n\t\t\t);\n\t\t}\n\t}\n\n\t// Compilation context\n\t//\n\t// Placeholders\n\t//\n\t// [fullhash] - data.hash (3a4b5c6e7f)\n\t//\n\t// Legacy Placeholders\n\t//\n\t// [hash] - data.hash (3a4b5c6e7f)\n\tif (data.hash) {\n\t\tconst hashReplacer = hashLength(\n\t\t\treplacer(data.hash),\n\t\t\tdata.hashWithLength,\n\t\t\tassetInfo,\n\t\t\t\"fullhash\"\n\t\t);\n\n\t\treplacements.set(\"fullhash\", hashReplacer);\n\n\t\t// Legacy\n\t\treplacements.set(\n\t\t\t\"hash\",\n\t\t\tdeprecated(\n\t\t\t\thashReplacer,\n\t\t\t\t\"[hash] is now [fullhash] (also consider using [chunkhash] or [contenthash], see documentation for details)\",\n\t\t\t\t\"DEP_WEBPACK_TEMPLATE_PATH_PLUGIN_REPLACE_PATH_VARIABLES_HASH\"\n\t\t\t)\n\t\t);\n\t}\n\n\t// Chunk Context\n\t//\n\t// Placeholders\n\t//\n\t// [id] - chunk.id (0.js)\n\t// [name] - chunk.name (app.js)\n\t// [chunkhash] - chunk.hash (7823t4t4.js)\n\t// [contenthash] - chunk.contentHash[type] (3256u3zg.js)\n\tif (data.chunk) {\n\t\tconst chunk = data.chunk;\n\n\t\tconst contentHashType = data.contentHashType;\n\n\t\tconst idReplacer = replacer(chunk.id);\n\t\tconst nameReplacer = replacer(chunk.name || chunk.id);\n\t\tconst chunkhashReplacer = hashLength(\n\t\t\treplacer(chunk instanceof Chunk ? chunk.renderedHash : chunk.hash),\n\t\t\t\"hashWithLength\" in chunk ? chunk.hashWithLength : undefined,\n\t\t\tassetInfo,\n\t\t\t\"chunkhash\"\n\t\t);\n\t\tconst contenthashReplacer = hashLength(\n\t\t\treplacer(\n\t\t\t\tdata.contentHash ||\n\t\t\t\t\t(contentHashType &&\n\t\t\t\t\t\tchunk.contentHash &&\n\t\t\t\t\t\tchunk.contentHash[contentHashType])\n\t\t\t),\n\t\t\tdata.contentHashWithLength ||\n\t\t\t\t(\"contentHashWithLength\" in chunk && chunk.contentHashWithLength\n\t\t\t\t\t? chunk.contentHashWithLength[/** @type {string} */ (contentHashType)]\n\t\t\t\t\t: undefined),\n\t\t\tassetInfo,\n\t\t\t\"contenthash\"\n\t\t);\n\n\t\treplacements.set(\"id\", idReplacer);\n\t\treplacements.set(\"name\", nameReplacer);\n\t\treplacements.set(\"chunkhash\", chunkhashReplacer);\n\t\treplacements.set(\"contenthash\", contenthashReplacer);\n\t}\n\n\t// Module Context\n\t//\n\t// Placeholders\n\t//\n\t// [id] - module.id (2.png)\n\t// [hash] - module.hash (6237543873.png)\n\t//\n\t// Legacy Placeholders\n\t//\n\t// [moduleid] - module.id (2.png)\n\t// [modulehash] - module.hash (6237543873.png)\n\tif (data.module) {\n\t\tconst module = data.module;\n\n\t\tconst idReplacer = replacer(() =>\n\t\t\tprepareId(\n\t\t\t\tmodule instanceof Module\n\t\t\t\t\t? /** @type {ModuleId} */\n\t\t\t\t\t\t(/** @type {ChunkGraph} */ (chunkGraph).getModuleId(module))\n\t\t\t\t\t: module.id\n\t\t\t)\n\t\t);\n\t\tconst moduleHashReplacer = hashLength(\n\t\t\treplacer(() =>\n\t\t\t\tmodule instanceof Module\n\t\t\t\t\t? /** @type {ChunkGraph} */\n\t\t\t\t\t\t(chunkGraph).getRenderedModuleHash(module, data.runtime)\n\t\t\t\t\t: module.hash\n\t\t\t),\n\t\t\t\"hashWithLength\" in module ? module.hashWithLength : undefined,\n\t\t\tassetInfo,\n\t\t\t\"modulehash\"\n\t\t);\n\t\tconst contentHashReplacer = hashLength(\n\t\t\treplacer(/** @type {string} */ (data.contentHash)),\n\t\t\tundefined,\n\t\t\tassetInfo,\n\t\t\t\"contenthash\"\n\t\t);\n\n\t\treplacements.set(\"id\", idReplacer);\n\t\treplacements.set(\"modulehash\", moduleHashReplacer);\n\t\treplacements.set(\"contenthash\", contentHashReplacer);\n\t\treplacements.set(\n\t\t\t\"hash\",\n\t\t\tdata.contentHash ? contentHashReplacer : moduleHashReplacer\n\t\t);\n\t\t// Legacy\n\t\treplacements.set(\n\t\t\t\"moduleid\",\n\t\t\tdeprecated(\n\t\t\t\tidReplacer,\n\t\t\t\t\"[moduleid] is now [id]\",\n\t\t\t\t\"DEP_WEBPACK_TEMPLATE_PATH_PLUGIN_REPLACE_PATH_VARIABLES_MODULE_ID\"\n\t\t\t)\n\t\t);\n\t}\n\n\t// Other things\n\tif (data.url) {\n\t\treplacements.set(\"url\", replacer(data.url));\n\t}\n\tif (typeof data.runtime === \"string\") {\n\t\treplacements.set(\n\t\t\t\"runtime\",\n\t\t\treplacer(() => prepareId(/** @type {string} */ (data.runtime)))\n\t\t);\n\t} else {\n\t\treplacements.set(\"runtime\", replacer(\"_\"));\n\t}\n\n\tif (typeof path === \"function\") {\n\t\tpath = path(data, assetInfo);\n\t}\n\n\tpath = path.replace(REGEXP, (match, content) => {\n\t\tif (content.length + 2 === match.length) {\n\t\t\tconst contentMatch = /^(\\w+)(?::(\\w+))?$/.exec(content);\n\t\t\tif (!contentMatch) return match;\n\t\t\tconst [, kind, arg] = contentMatch;\n\t\t\tconst replacer = replacements.get(kind);\n\t\t\tif (replacer !== undefined) {\n\t\t\t\treturn replacer(match, arg, path);\n\t\t\t}\n\t\t} else if (match.startsWith(\"[\\\\\") && match.endsWith(\"\\\\]\")) {\n\t\t\treturn `[${match.slice(2, -2)}]`;\n\t\t}\n\t\treturn match;\n\t});\n\n\treturn path;\n};\n\nconst plugin = \"TemplatedPathPlugin\";\n\nclass TemplatedPathPlugin {\n\t/**\n\t * Apply the plugin\n\t * @param {Compiler} compiler the compiler instance\n\t * @returns {void}\n\t */\n\tapply(compiler) {\n\t\tcompiler.hooks.compilation.tap(plugin, compilation => {\n\t\t\tcompilation.hooks.assetPath.tap(plugin, replacePathVariables);\n\t\t});\n\t}\n}\n\nmodule.exports = TemplatedPathPlugin;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}