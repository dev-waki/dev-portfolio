{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Sergey Melyukov @smelukov\n*/\n\n\"use strict\";\n\nconst {\n  ReplaceSource,\n  RawSource,\n  ConcatSource\n} = require(\"webpack-sources\");\nconst {\n  UsageState\n} = require(\"../ExportsInfo\");\nconst Generator = require(\"../Generator\");\nconst {\n  JS_TYPES\n} = require(\"../ModuleSourceTypesConstants\");\nconst RuntimeGlobals = require(\"../RuntimeGlobals\");\nconst Template = require(\"../Template\");\n\n/** @typedef {import(\"webpack-sources\").Source} Source */\n/** @typedef {import(\"../../declarations/WebpackOptions\").CssGeneratorExportsConvention} CssGeneratorExportsConvention */\n/** @typedef {import(\"../../declarations/WebpackOptions\").CssGeneratorLocalIdentName} CssGeneratorLocalIdentName */\n/** @typedef {import(\"../CodeGenerationResults\")} CodeGenerationResults */\n/** @typedef {import(\"../Dependency\")} Dependency */\n/** @typedef {import(\"../DependencyTemplate\").CssDependencyTemplateContext} DependencyTemplateContext */\n/** @typedef {import(\"../DependencyTemplate\").CssExportsData} CssExportsData */\n/** @typedef {import(\"../Generator\").GenerateContext} GenerateContext */\n/** @typedef {import(\"../Generator\").UpdateHashContext} UpdateHashContext */\n/** @typedef {import(\"../Module\").ConcatenationBailoutReasonContext} ConcatenationBailoutReasonContext */\n/** @typedef {import(\"../Module\").SourceTypes} SourceTypes */\n/** @typedef {import(\"../NormalModule\")} NormalModule */\n/** @typedef {import(\"../util/Hash\")} Hash */\n\n/**\n * @template T\n * @typedef {import(\"../InitFragment\")<T>} InitFragment\n */\n\nclass CssExportsGenerator extends Generator {\n  /**\n   * @param {CssGeneratorExportsConvention} convention the convention of the exports name\n   * @param {CssGeneratorLocalIdentName} localIdentName css export local ident name\n   * @param {boolean} esModule whether to use ES modules syntax\n   */\n  constructor(convention, localIdentName, esModule) {\n    super();\n    this.convention = convention;\n    this.localIdentName = localIdentName;\n    /** @type {boolean} */\n    this.esModule = esModule;\n  }\n\n  /**\n   * @param {NormalModule} module module for which the bailout reason should be determined\n   * @param {ConcatenationBailoutReasonContext} context context\n   * @returns {string | undefined} reason why this module can't be concatenated, undefined when it can be concatenated\n   */\n  getConcatenationBailoutReason(module, context) {\n    if (!this.esModule) {\n      return \"Module is not an ECMAScript module\";\n    }\n    // TODO webpack 6: remove /\\[moduleid\\]/.test\n    if (/\\[id\\]/.test(this.localIdentName) || /\\[moduleid\\]/.test(this.localIdentName)) {\n      return \"The localIdentName includes moduleId ([id] or [moduleid])\";\n    }\n    return undefined;\n  }\n\n  /**\n   * @param {NormalModule} module module for which the code should be generated\n   * @param {GenerateContext} generateContext context for generate\n   * @returns {Source | null} generated code\n   */\n  generate(module, generateContext) {\n    const source = new ReplaceSource(new RawSource(\"\"));\n    /** @type {InitFragment<GenerateContext>[]} */\n    const initFragments = [];\n    /** @type {CssExportsData} */\n    const cssExportsData = {\n      esModule: this.esModule,\n      exports: new Map()\n    };\n    generateContext.runtimeRequirements.add(RuntimeGlobals.module);\n\n    /** @type {InitFragment<GenerateContext>[] | undefined} */\n    let chunkInitFragments;\n    const runtimeRequirements = new Set();\n\n    /** @type {DependencyTemplateContext} */\n    const templateContext = {\n      runtimeTemplate: generateContext.runtimeTemplate,\n      dependencyTemplates: generateContext.dependencyTemplates,\n      moduleGraph: generateContext.moduleGraph,\n      chunkGraph: generateContext.chunkGraph,\n      module,\n      runtime: generateContext.runtime,\n      runtimeRequirements,\n      concatenationScope: generateContext.concatenationScope,\n      codeGenerationResults: (/** @type {CodeGenerationResults} */\n      generateContext.codeGenerationResults),\n      initFragments,\n      cssExportsData,\n      get chunkInitFragments() {\n        if (!chunkInitFragments) {\n          const data = /** @type {NonNullable<GenerateContext[\"getData\"]>} */\n          generateContext.getData();\n          chunkInitFragments = data.get(\"chunkInitFragments\");\n          if (!chunkInitFragments) {\n            chunkInitFragments = [];\n            data.set(\"chunkInitFragments\", chunkInitFragments);\n          }\n        }\n        return chunkInitFragments;\n      }\n    };\n\n    /**\n     * @param {Dependency} dependency the dependency\n     */\n    const handleDependency = dependency => {\n      const constructor = /** @type {new (...args: any[]) => Dependency} */\n      dependency.constructor;\n      const template = generateContext.dependencyTemplates.get(constructor);\n      if (!template) {\n        throw new Error(`No template for dependency: ${dependency.constructor.name}`);\n      }\n      template.apply(dependency, source, templateContext);\n    };\n    for (const dependency of module.dependencies) {\n      handleDependency(dependency);\n    }\n    if (generateContext.concatenationScope) {\n      const source = new ConcatSource();\n      const usedIdentifiers = new Set();\n      for (const [name, v] of cssExportsData.exports) {\n        let identifier = Template.toIdentifier(name);\n        const i = 0;\n        while (usedIdentifiers.has(identifier)) {\n          identifier = Template.toIdentifier(name + i);\n        }\n        usedIdentifiers.add(identifier);\n        generateContext.concatenationScope.registerExport(name, identifier);\n        source.add(`${generateContext.runtimeTemplate.supportsConst() ? \"const\" : \"var\"} ${identifier} = ${JSON.stringify(v)};\\n`);\n      }\n      return source;\n    }\n    const needNsObj = this.esModule && generateContext.moduleGraph.getExportsInfo(module).otherExportsInfo.getUsed(generateContext.runtime) !== UsageState.Unused;\n    if (needNsObj) {\n      generateContext.runtimeRequirements.add(RuntimeGlobals.makeNamespaceObject);\n    }\n    const exports = [];\n    for (const [name, v] of cssExportsData.exports) {\n      exports.push(`\\t${JSON.stringify(name)}: ${JSON.stringify(v)}`);\n    }\n    return new RawSource(`${needNsObj ? `${RuntimeGlobals.makeNamespaceObject}(` : \"\"}${module.moduleArgument}.exports = {\\n${exports.join(\",\\n\")}\\n}${needNsObj ? \")\" : \"\"};`);\n  }\n\n  /**\n   * @param {NormalModule} module fresh module\n   * @returns {SourceTypes} available types (do not mutate)\n   */\n  getTypes(module) {\n    return JS_TYPES;\n  }\n\n  /**\n   * @param {NormalModule} module the module\n   * @param {string=} type source type\n   * @returns {number} estimate size of the module\n   */\n  getSize(module, type) {\n    return 42;\n  }\n\n  /**\n   * @param {Hash} hash hash that will be modified\n   * @param {UpdateHashContext} updateHashContext context for updating hash\n   */\n  updateHash(hash, {\n    module\n  }) {\n    hash.update(this.esModule.toString());\n  }\n}\nmodule.exports = CssExportsGenerator;","map":{"version":3,"names":["ReplaceSource","RawSource","ConcatSource","require","UsageState","Generator","JS_TYPES","RuntimeGlobals","Template","CssExportsGenerator","constructor","convention","localIdentName","esModule","getConcatenationBailoutReason","module","context","test","undefined","generate","generateContext","source","initFragments","cssExportsData","exports","Map","runtimeRequirements","add","chunkInitFragments","Set","templateContext","runtimeTemplate","dependencyTemplates","moduleGraph","chunkGraph","runtime","concatenationScope","codeGenerationResults","data","getData","get","set","handleDependency","dependency","template","Error","name","apply","dependencies","usedIdentifiers","v","identifier","toIdentifier","i","has","registerExport","supportsConst","JSON","stringify","needNsObj","getExportsInfo","otherExportsInfo","getUsed","Unused","makeNamespaceObject","push","moduleArgument","join","getTypes","getSize","type","updateHash","hash","update","toString"],"sources":["/home/wickliff/Desktop/dev-waki/portfolio2/node_modules/webpack/lib/css/CssExportsGenerator.js"],"sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Sergey Melyukov @smelukov\n*/\n\n\"use strict\";\n\nconst { ReplaceSource, RawSource, ConcatSource } = require(\"webpack-sources\");\nconst { UsageState } = require(\"../ExportsInfo\");\nconst Generator = require(\"../Generator\");\nconst { JS_TYPES } = require(\"../ModuleSourceTypesConstants\");\nconst RuntimeGlobals = require(\"../RuntimeGlobals\");\nconst Template = require(\"../Template\");\n\n/** @typedef {import(\"webpack-sources\").Source} Source */\n/** @typedef {import(\"../../declarations/WebpackOptions\").CssGeneratorExportsConvention} CssGeneratorExportsConvention */\n/** @typedef {import(\"../../declarations/WebpackOptions\").CssGeneratorLocalIdentName} CssGeneratorLocalIdentName */\n/** @typedef {import(\"../CodeGenerationResults\")} CodeGenerationResults */\n/** @typedef {import(\"../Dependency\")} Dependency */\n/** @typedef {import(\"../DependencyTemplate\").CssDependencyTemplateContext} DependencyTemplateContext */\n/** @typedef {import(\"../DependencyTemplate\").CssExportsData} CssExportsData */\n/** @typedef {import(\"../Generator\").GenerateContext} GenerateContext */\n/** @typedef {import(\"../Generator\").UpdateHashContext} UpdateHashContext */\n/** @typedef {import(\"../Module\").ConcatenationBailoutReasonContext} ConcatenationBailoutReasonContext */\n/** @typedef {import(\"../Module\").SourceTypes} SourceTypes */\n/** @typedef {import(\"../NormalModule\")} NormalModule */\n/** @typedef {import(\"../util/Hash\")} Hash */\n\n/**\n * @template T\n * @typedef {import(\"../InitFragment\")<T>} InitFragment\n */\n\nclass CssExportsGenerator extends Generator {\n\t/**\n\t * @param {CssGeneratorExportsConvention} convention the convention of the exports name\n\t * @param {CssGeneratorLocalIdentName} localIdentName css export local ident name\n\t * @param {boolean} esModule whether to use ES modules syntax\n\t */\n\tconstructor(convention, localIdentName, esModule) {\n\t\tsuper();\n\t\tthis.convention = convention;\n\t\tthis.localIdentName = localIdentName;\n\t\t/** @type {boolean} */\n\t\tthis.esModule = esModule;\n\t}\n\n\t/**\n\t * @param {NormalModule} module module for which the bailout reason should be determined\n\t * @param {ConcatenationBailoutReasonContext} context context\n\t * @returns {string | undefined} reason why this module can't be concatenated, undefined when it can be concatenated\n\t */\n\tgetConcatenationBailoutReason(module, context) {\n\t\tif (!this.esModule) {\n\t\t\treturn \"Module is not an ECMAScript module\";\n\t\t}\n\t\t// TODO webpack 6: remove /\\[moduleid\\]/.test\n\t\tif (\n\t\t\t/\\[id\\]/.test(this.localIdentName) ||\n\t\t\t/\\[moduleid\\]/.test(this.localIdentName)\n\t\t) {\n\t\t\treturn \"The localIdentName includes moduleId ([id] or [moduleid])\";\n\t\t}\n\t\treturn undefined;\n\t}\n\n\t/**\n\t * @param {NormalModule} module module for which the code should be generated\n\t * @param {GenerateContext} generateContext context for generate\n\t * @returns {Source | null} generated code\n\t */\n\tgenerate(module, generateContext) {\n\t\tconst source = new ReplaceSource(new RawSource(\"\"));\n\t\t/** @type {InitFragment<GenerateContext>[]} */\n\t\tconst initFragments = [];\n\t\t/** @type {CssExportsData} */\n\t\tconst cssExportsData = {\n\t\t\tesModule: this.esModule,\n\t\t\texports: new Map()\n\t\t};\n\n\t\tgenerateContext.runtimeRequirements.add(RuntimeGlobals.module);\n\n\t\t/** @type {InitFragment<GenerateContext>[] | undefined} */\n\t\tlet chunkInitFragments;\n\t\tconst runtimeRequirements = new Set();\n\n\t\t/** @type {DependencyTemplateContext} */\n\t\tconst templateContext = {\n\t\t\truntimeTemplate: generateContext.runtimeTemplate,\n\t\t\tdependencyTemplates: generateContext.dependencyTemplates,\n\t\t\tmoduleGraph: generateContext.moduleGraph,\n\t\t\tchunkGraph: generateContext.chunkGraph,\n\t\t\tmodule,\n\t\t\truntime: generateContext.runtime,\n\t\t\truntimeRequirements,\n\t\t\tconcatenationScope: generateContext.concatenationScope,\n\t\t\tcodeGenerationResults:\n\t\t\t\t/** @type {CodeGenerationResults} */\n\t\t\t\t(generateContext.codeGenerationResults),\n\t\t\tinitFragments,\n\t\t\tcssExportsData,\n\t\t\tget chunkInitFragments() {\n\t\t\t\tif (!chunkInitFragments) {\n\t\t\t\t\tconst data =\n\t\t\t\t\t\t/** @type {NonNullable<GenerateContext[\"getData\"]>} */\n\t\t\t\t\t\t(generateContext.getData)();\n\t\t\t\t\tchunkInitFragments = data.get(\"chunkInitFragments\");\n\t\t\t\t\tif (!chunkInitFragments) {\n\t\t\t\t\t\tchunkInitFragments = [];\n\t\t\t\t\t\tdata.set(\"chunkInitFragments\", chunkInitFragments);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\treturn chunkInitFragments;\n\t\t\t}\n\t\t};\n\n\t\t/**\n\t\t * @param {Dependency} dependency the dependency\n\t\t */\n\t\tconst handleDependency = dependency => {\n\t\t\tconst constructor = /** @type {new (...args: any[]) => Dependency} */ (\n\t\t\t\tdependency.constructor\n\t\t\t);\n\t\t\tconst template = generateContext.dependencyTemplates.get(constructor);\n\t\t\tif (!template) {\n\t\t\t\tthrow new Error(\n\t\t\t\t\t`No template for dependency: ${dependency.constructor.name}`\n\t\t\t\t);\n\t\t\t}\n\n\t\t\ttemplate.apply(dependency, source, templateContext);\n\t\t};\n\n\t\tfor (const dependency of module.dependencies) {\n\t\t\thandleDependency(dependency);\n\t\t}\n\n\t\tif (generateContext.concatenationScope) {\n\t\t\tconst source = new ConcatSource();\n\t\t\tconst usedIdentifiers = new Set();\n\t\t\tfor (const [name, v] of cssExportsData.exports) {\n\t\t\t\tlet identifier = Template.toIdentifier(name);\n\t\t\t\tconst i = 0;\n\t\t\t\twhile (usedIdentifiers.has(identifier)) {\n\t\t\t\t\tidentifier = Template.toIdentifier(name + i);\n\t\t\t\t}\n\t\t\t\tusedIdentifiers.add(identifier);\n\t\t\t\tgenerateContext.concatenationScope.registerExport(name, identifier);\n\t\t\t\tsource.add(\n\t\t\t\t\t`${\n\t\t\t\t\t\tgenerateContext.runtimeTemplate.supportsConst() ? \"const\" : \"var\"\n\t\t\t\t\t} ${identifier} = ${JSON.stringify(v)};\\n`\n\t\t\t\t);\n\t\t\t}\n\t\t\treturn source;\n\t\t}\n\t\tconst needNsObj =\n\t\t\tthis.esModule &&\n\t\t\tgenerateContext.moduleGraph\n\t\t\t\t.getExportsInfo(module)\n\t\t\t\t.otherExportsInfo.getUsed(generateContext.runtime) !==\n\t\t\t\tUsageState.Unused;\n\t\tif (needNsObj) {\n\t\t\tgenerateContext.runtimeRequirements.add(\n\t\t\t\tRuntimeGlobals.makeNamespaceObject\n\t\t\t);\n\t\t}\n\t\tconst exports = [];\n\t\tfor (const [name, v] of cssExportsData.exports) {\n\t\t\texports.push(`\\t${JSON.stringify(name)}: ${JSON.stringify(v)}`);\n\t\t}\n\t\treturn new RawSource(\n\t\t\t`${needNsObj ? `${RuntimeGlobals.makeNamespaceObject}(` : \"\"}${\n\t\t\t\tmodule.moduleArgument\n\t\t\t}.exports = {\\n${exports.join(\",\\n\")}\\n}${needNsObj ? \")\" : \"\"};`\n\t\t);\n\t}\n\n\t/**\n\t * @param {NormalModule} module fresh module\n\t * @returns {SourceTypes} available types (do not mutate)\n\t */\n\tgetTypes(module) {\n\t\treturn JS_TYPES;\n\t}\n\n\t/**\n\t * @param {NormalModule} module the module\n\t * @param {string=} type source type\n\t * @returns {number} estimate size of the module\n\t */\n\tgetSize(module, type) {\n\t\treturn 42;\n\t}\n\n\t/**\n\t * @param {Hash} hash hash that will be modified\n\t * @param {UpdateHashContext} updateHashContext context for updating hash\n\t */\n\tupdateHash(hash, { module }) {\n\t\thash.update(this.esModule.toString());\n\t}\n}\n\nmodule.exports = CssExportsGenerator;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}