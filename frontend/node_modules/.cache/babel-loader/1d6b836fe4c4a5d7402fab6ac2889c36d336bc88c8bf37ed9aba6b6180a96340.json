{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\n\"use strict\";\n\nconst t = require(\"@webassemblyjs/ast\");\nconst {\n  moduleContextFromModuleAST\n} = require(\"@webassemblyjs/ast\");\nconst {\n  editWithAST,\n  addWithAST\n} = require(\"@webassemblyjs/wasm-edit\");\nconst {\n  decode\n} = require(\"@webassemblyjs/wasm-parser\");\nconst {\n  RawSource\n} = require(\"webpack-sources\");\nconst Generator = require(\"../Generator\");\nconst {\n  WEBASSEMBLY_TYPES\n} = require(\"../ModuleSourceTypesConstants\");\nconst WebAssemblyUtils = require(\"./WebAssemblyUtils\");\nconst WebAssemblyExportImportedDependency = require(\"../dependencies/WebAssemblyExportImportedDependency\");\n\n/** @typedef {import(\"webpack-sources\").Source} Source */\n/** @typedef {import(\"../DependencyTemplates\")} DependencyTemplates */\n/** @typedef {import(\"../Generator\").GenerateContext} GenerateContext */\n/** @typedef {import(\"../Module\")} Module */\n/** @typedef {import(\"../Module\").SourceTypes} SourceTypes */\n/** @typedef {import(\"../ModuleGraph\")} ModuleGraph */\n/** @typedef {import(\"../NormalModule\")} NormalModule */\n/** @typedef {import(\"../RuntimeTemplate\")} RuntimeTemplate */\n/** @typedef {import(\"../util/runtime\").RuntimeSpec} RuntimeSpec */\n/** @typedef {import(\"./WebAssemblyUtils\").UsedWasmDependency} UsedWasmDependency */\n/** @typedef {import(\"@webassemblyjs/ast\").Instruction} Instruction */\n/** @typedef {import(\"@webassemblyjs/ast\").ModuleImport} ModuleImport */\n/** @typedef {import(\"@webassemblyjs/ast\").ModuleExport} ModuleExport */\n/** @typedef {import(\"@webassemblyjs/ast\").Global} Global */\n/**\n * @template T\n * @typedef {import(\"@webassemblyjs/ast\").NodePath<T>} NodePath\n */\n\n/**\n * @typedef {(buf: ArrayBuffer) => ArrayBuffer} ArrayBufferTransform\n */\n\n/**\n * @template T\n * @param {((prev: ArrayBuffer) => ArrayBuffer)[]} fns transforms\n * @returns {Function} composed transform\n */\nconst compose = (...fns) => fns.reduce((prevFn, nextFn) => value => nextFn(prevFn(value)), value => value);\n\n/**\n * Removes the start instruction\n * @param {object} state state\n * @param {object} state.ast Module's ast\n * @returns {ArrayBufferTransform} transform\n */\nconst removeStartFunc = state => bin => editWithAST(state.ast, bin, {\n  Start(path) {\n    path.remove();\n  }\n});\n\n/**\n * Get imported globals\n * @param {object} ast Module's AST\n * @returns {t.ModuleImport[]} - nodes\n */\nconst getImportedGlobals = ast => {\n  /** @type {t.ModuleImport[]} */\n  const importedGlobals = [];\n  t.traverse(ast, {\n    ModuleImport({\n      node\n    }) {\n      if (t.isGlobalType(node.descr)) {\n        importedGlobals.push(node);\n      }\n    }\n  });\n  return importedGlobals;\n};\n\n/**\n * Get the count for imported func\n * @param {object} ast Module's AST\n * @returns {number} - count\n */\nconst getCountImportedFunc = ast => {\n  let count = 0;\n  t.traverse(ast, {\n    ModuleImport({\n      node\n    }) {\n      if (t.isFuncImportDescr(node.descr)) {\n        count++;\n      }\n    }\n  });\n  return count;\n};\n\n/**\n * Get next type index\n * @param {object} ast Module's AST\n * @returns {t.Index} - index\n */\nconst getNextTypeIndex = ast => {\n  const typeSectionMetadata = t.getSectionMetadata(ast, \"type\");\n  if (typeSectionMetadata === undefined) {\n    return t.indexLiteral(0);\n  }\n  return t.indexLiteral(typeSectionMetadata.vectorOfSize.value);\n};\n\n/**\n * Get next func index\n * The Func section metadata provide information for implemented funcs\n * in order to have the correct index we shift the index by number of external\n * functions.\n * @param {object} ast Module's AST\n * @param {number} countImportedFunc number of imported funcs\n * @returns {t.Index} - index\n */\nconst getNextFuncIndex = (ast, countImportedFunc) => {\n  const funcSectionMetadata = t.getSectionMetadata(ast, \"func\");\n  if (funcSectionMetadata === undefined) {\n    return t.indexLiteral(0 + countImportedFunc);\n  }\n  const vectorOfSize = funcSectionMetadata.vectorOfSize.value;\n  return t.indexLiteral(vectorOfSize + countImportedFunc);\n};\n\n/**\n * Creates an init instruction for a global type\n * @param {t.GlobalType} globalType the global type\n * @returns {t.Instruction} init expression\n */\nconst createDefaultInitForGlobal = globalType => {\n  if (globalType.valtype[0] === \"i\") {\n    // create NumberLiteral global initializer\n    return t.objectInstruction(\"const\", globalType.valtype, [t.numberLiteralFromRaw(66)]);\n  } else if (globalType.valtype[0] === \"f\") {\n    // create FloatLiteral global initializer\n    return t.objectInstruction(\"const\", globalType.valtype, [t.floatLiteral(66, false, false, \"66\")]);\n  }\n  throw new Error(`unknown type: ${globalType.valtype}`);\n};\n\n/**\n * Rewrite the import globals:\n * - removes the ModuleImport instruction\n * - injects at the same offset a mutable global of the same type\n *\n * Since the imported globals are before the other global declarations, our\n * indices will be preserved.\n *\n * Note that globals will become mutable.\n * @param {object} state transformation state\n * @param {object} state.ast Module's ast\n * @param {t.Instruction[]} state.additionalInitCode list of addition instructions for the init function\n * @returns {ArrayBufferTransform} transform\n */\nconst rewriteImportedGlobals = state => bin => {\n  const additionalInitCode = state.additionalInitCode;\n  /** @type {Array<t.Global>} */\n  const newGlobals = [];\n  bin = editWithAST(state.ast, bin, {\n    ModuleImport(path) {\n      if (t.isGlobalType(path.node.descr)) {\n        const globalType = /** @type {TODO} */path.node.descr;\n        globalType.mutability = \"var\";\n        const init = [createDefaultInitForGlobal(globalType), t.instruction(\"end\")];\n        newGlobals.push(t.global(globalType, init));\n        path.remove();\n      }\n    },\n    // in order to preserve non-imported global's order we need to re-inject\n    // those as well\n    /**\n     * @param {NodePath<Global>} path path\n     */\n    Global(path) {\n      const {\n        node\n      } = path;\n      const [init] = node.init;\n      if (init.id === \"get_global\") {\n        node.globalType.mutability = \"var\";\n        const initialGlobalIdx = init.args[0];\n        node.init = [createDefaultInitForGlobal(node.globalType), t.instruction(\"end\")];\n        additionalInitCode.push(\n        /**\n         * get_global in global initializer only works for imported globals.\n         * They have the same indices as the init params, so use the\n         * same index.\n         */\n        t.instruction(\"get_local\", [initialGlobalIdx]), t.instruction(\"set_global\", [t.indexLiteral(newGlobals.length)]));\n      }\n      newGlobals.push(node);\n      path.remove();\n    }\n  });\n\n  // Add global declaration instructions\n  return addWithAST(state.ast, bin, newGlobals);\n};\n\n/**\n * Rewrite the export names\n * @param {object} state state\n * @param {object} state.ast Module's ast\n * @param {Module} state.module Module\n * @param {ModuleGraph} state.moduleGraph module graph\n * @param {Set<string>} state.externalExports Module\n * @param {RuntimeSpec} state.runtime runtime\n * @returns {ArrayBufferTransform} transform\n */\nconst rewriteExportNames = ({\n  ast,\n  moduleGraph,\n  module,\n  externalExports,\n  runtime\n}) => bin => editWithAST(ast, bin, {\n  /**\n   * @param {NodePath<ModuleExport>} path path\n   */\n  ModuleExport(path) {\n    const isExternal = externalExports.has(path.node.name);\n    if (isExternal) {\n      path.remove();\n      return;\n    }\n    const usedName = moduleGraph.getExportsInfo(module).getUsedName(path.node.name, runtime);\n    if (!usedName) {\n      path.remove();\n      return;\n    }\n    path.node.name = /** @type {string} */usedName;\n  }\n});\n\n/**\n * Mangle import names and modules\n * @param {object} state state\n * @param {object} state.ast Module's ast\n * @param {Map<string, UsedWasmDependency>} state.usedDependencyMap mappings to mangle names\n * @returns {ArrayBufferTransform} transform\n */\nconst rewriteImports = ({\n  ast,\n  usedDependencyMap\n}) => bin => editWithAST(ast, bin, {\n  /**\n   * @param {NodePath<ModuleImport>} path path\n   */\n  ModuleImport(path) {\n    const result = usedDependencyMap.get(`${path.node.module}:${path.node.name}`);\n    if (result !== undefined) {\n      path.node.module = result.module;\n      path.node.name = result.name;\n    }\n  }\n});\n\n/**\n * Add an init function.\n *\n * The init function fills the globals given input arguments.\n * @param {object} state transformation state\n * @param {object} state.ast Module's ast\n * @param {t.Identifier} state.initFuncId identifier of the init function\n * @param {t.Index} state.startAtFuncOffset index of the start function\n * @param {t.ModuleImport[]} state.importedGlobals list of imported globals\n * @param {t.Instruction[]} state.additionalInitCode list of addition instructions for the init function\n * @param {t.Index} state.nextFuncIndex index of the next function\n * @param {t.Index} state.nextTypeIndex index of the next type\n * @returns {ArrayBufferTransform} transform\n */\nconst addInitFunction = ({\n  ast,\n  initFuncId,\n  startAtFuncOffset,\n  importedGlobals,\n  additionalInitCode,\n  nextFuncIndex,\n  nextTypeIndex\n}) => bin => {\n  const funcParams = importedGlobals.map(importedGlobal => {\n    // used for debugging\n    const id = t.identifier(`${importedGlobal.module}.${importedGlobal.name}`);\n    return t.funcParam(/** @type {string} */importedGlobal.descr.valtype, id);\n  });\n\n  /** @type {Instruction[]} */\n  const funcBody = [];\n  for (const [index, _importedGlobal] of importedGlobals.entries()) {\n    const args = [t.indexLiteral(index)];\n    const body = [t.instruction(\"get_local\", args), t.instruction(\"set_global\", args)];\n    funcBody.push(...body);\n  }\n  if (typeof startAtFuncOffset === \"number\") {\n    funcBody.push(t.callInstruction(t.numberLiteralFromRaw(startAtFuncOffset)));\n  }\n  for (const instr of additionalInitCode) {\n    funcBody.push(instr);\n  }\n  funcBody.push(t.instruction(\"end\"));\n\n  /** @type {string[]} */\n  const funcResults = [];\n\n  // Code section\n  const funcSignature = t.signature(funcParams, funcResults);\n  const func = t.func(initFuncId, funcSignature, funcBody);\n\n  // Type section\n  const functype = t.typeInstruction(undefined, funcSignature);\n\n  // Func section\n  const funcindex = t.indexInFuncSection(nextTypeIndex);\n\n  // Export section\n  const moduleExport = t.moduleExport(initFuncId.value, t.moduleExportDescr(\"Func\", nextFuncIndex));\n  return addWithAST(ast, bin, [func, moduleExport, funcindex, functype]);\n};\n\n/**\n * Extract mangle mappings from module\n * @param {ModuleGraph} moduleGraph module graph\n * @param {Module} module current module\n * @param {boolean | undefined} mangle mangle imports\n * @returns {Map<string, UsedWasmDependency>} mappings to mangled names\n */\nconst getUsedDependencyMap = (moduleGraph, module, mangle) => {\n  /** @type {Map<string, UsedWasmDependency>} */\n  const map = new Map();\n  for (const usedDep of WebAssemblyUtils.getUsedDependencies(moduleGraph, module, mangle)) {\n    const dep = usedDep.dependency;\n    const request = dep.request;\n    const exportName = dep.name;\n    map.set(`${request}:${exportName}`, usedDep);\n  }\n  return map;\n};\n\n/**\n * @typedef {object} WebAssemblyGeneratorOptions\n * @property {boolean} [mangleImports] mangle imports\n */\n\nclass WebAssemblyGenerator extends Generator {\n  /**\n   * @param {WebAssemblyGeneratorOptions} options options\n   */\n  constructor(options) {\n    super();\n    this.options = options;\n  }\n\n  /**\n   * @param {NormalModule} module fresh module\n   * @returns {SourceTypes} available types (do not mutate)\n   */\n  getTypes(module) {\n    return WEBASSEMBLY_TYPES;\n  }\n\n  /**\n   * @param {NormalModule} module the module\n   * @param {string=} type source type\n   * @returns {number} estimate size of the module\n   */\n  getSize(module, type) {\n    const originalSource = module.originalSource();\n    if (!originalSource) {\n      return 0;\n    }\n    return originalSource.size();\n  }\n\n  /**\n   * @param {NormalModule} module module for which the code should be generated\n   * @param {GenerateContext} generateContext context for generate\n   * @returns {Source | null} generated code\n   */\n  generate(module, {\n    moduleGraph,\n    runtime\n  }) {\n    const bin = /** @type {Source} */module.originalSource().source();\n    const initFuncId = t.identifier(\"\");\n\n    // parse it\n    const ast = decode(bin, {\n      ignoreDataSection: true,\n      ignoreCodeSection: true,\n      ignoreCustomNameSection: true\n    });\n    const moduleContext = moduleContextFromModuleAST(ast.body[0]);\n    const importedGlobals = getImportedGlobals(ast);\n    const countImportedFunc = getCountImportedFunc(ast);\n    const startAtFuncOffset = moduleContext.getStart();\n    const nextFuncIndex = getNextFuncIndex(ast, countImportedFunc);\n    const nextTypeIndex = getNextTypeIndex(ast);\n    const usedDependencyMap = getUsedDependencyMap(moduleGraph, module, this.options.mangleImports);\n    const externalExports = new Set(module.dependencies.filter(d => d instanceof WebAssemblyExportImportedDependency).map(d => {\n      const wasmDep = /** @type {WebAssemblyExportImportedDependency} */\n      d;\n      return wasmDep.exportName;\n    }));\n\n    /** @type {t.Instruction[]} */\n    const additionalInitCode = [];\n    const transform = compose(rewriteExportNames({\n      ast,\n      moduleGraph,\n      module,\n      externalExports,\n      runtime\n    }), removeStartFunc({\n      ast\n    }), rewriteImportedGlobals({\n      ast,\n      additionalInitCode\n    }), rewriteImports({\n      ast,\n      usedDependencyMap\n    }), addInitFunction({\n      ast,\n      initFuncId,\n      importedGlobals,\n      additionalInitCode,\n      startAtFuncOffset,\n      nextFuncIndex,\n      nextTypeIndex\n    }));\n    const newBin = transform(bin);\n    const newBuf = Buffer.from(newBin);\n    return new RawSource(newBuf);\n  }\n}\nmodule.exports = WebAssemblyGenerator;","map":{"version":3,"names":["t","require","moduleContextFromModuleAST","editWithAST","addWithAST","decode","RawSource","Generator","WEBASSEMBLY_TYPES","WebAssemblyUtils","WebAssemblyExportImportedDependency","compose","fns","reduce","prevFn","nextFn","value","removeStartFunc","state","bin","ast","Start","path","remove","getImportedGlobals","importedGlobals","traverse","ModuleImport","node","isGlobalType","descr","push","getCountImportedFunc","count","isFuncImportDescr","getNextTypeIndex","typeSectionMetadata","getSectionMetadata","undefined","indexLiteral","vectorOfSize","getNextFuncIndex","countImportedFunc","funcSectionMetadata","createDefaultInitForGlobal","globalType","valtype","objectInstruction","numberLiteralFromRaw","floatLiteral","Error","rewriteImportedGlobals","additionalInitCode","newGlobals","mutability","init","instruction","global","Global","id","initialGlobalIdx","args","length","rewriteExportNames","moduleGraph","module","externalExports","runtime","ModuleExport","isExternal","has","name","usedName","getExportsInfo","getUsedName","rewriteImports","usedDependencyMap","result","get","addInitFunction","initFuncId","startAtFuncOffset","nextFuncIndex","nextTypeIndex","funcParams","map","importedGlobal","identifier","funcParam","funcBody","index","_importedGlobal","entries","body","callInstruction","instr","funcResults","funcSignature","signature","func","functype","typeInstruction","funcindex","indexInFuncSection","moduleExport","moduleExportDescr","getUsedDependencyMap","mangle","Map","usedDep","getUsedDependencies","dep","dependency","request","exportName","set","WebAssemblyGenerator","constructor","options","getTypes","getSize","type","originalSource","size","generate","source","ignoreDataSection","ignoreCodeSection","ignoreCustomNameSection","moduleContext","getStart","mangleImports","Set","dependencies","filter","d","wasmDep","transform","newBin","newBuf","Buffer","from","exports"],"sources":["/home/wickliff/Desktop/dev-waki/portfolio2/node_modules/webpack/lib/wasm-sync/WebAssemblyGenerator.js"],"sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\n\"use strict\";\n\nconst t = require(\"@webassemblyjs/ast\");\nconst { moduleContextFromModuleAST } = require(\"@webassemblyjs/ast\");\nconst { editWithAST, addWithAST } = require(\"@webassemblyjs/wasm-edit\");\nconst { decode } = require(\"@webassemblyjs/wasm-parser\");\nconst { RawSource } = require(\"webpack-sources\");\nconst Generator = require(\"../Generator\");\nconst { WEBASSEMBLY_TYPES } = require(\"../ModuleSourceTypesConstants\");\nconst WebAssemblyUtils = require(\"./WebAssemblyUtils\");\n\nconst WebAssemblyExportImportedDependency = require(\"../dependencies/WebAssemblyExportImportedDependency\");\n\n/** @typedef {import(\"webpack-sources\").Source} Source */\n/** @typedef {import(\"../DependencyTemplates\")} DependencyTemplates */\n/** @typedef {import(\"../Generator\").GenerateContext} GenerateContext */\n/** @typedef {import(\"../Module\")} Module */\n/** @typedef {import(\"../Module\").SourceTypes} SourceTypes */\n/** @typedef {import(\"../ModuleGraph\")} ModuleGraph */\n/** @typedef {import(\"../NormalModule\")} NormalModule */\n/** @typedef {import(\"../RuntimeTemplate\")} RuntimeTemplate */\n/** @typedef {import(\"../util/runtime\").RuntimeSpec} RuntimeSpec */\n/** @typedef {import(\"./WebAssemblyUtils\").UsedWasmDependency} UsedWasmDependency */\n/** @typedef {import(\"@webassemblyjs/ast\").Instruction} Instruction */\n/** @typedef {import(\"@webassemblyjs/ast\").ModuleImport} ModuleImport */\n/** @typedef {import(\"@webassemblyjs/ast\").ModuleExport} ModuleExport */\n/** @typedef {import(\"@webassemblyjs/ast\").Global} Global */\n/**\n * @template T\n * @typedef {import(\"@webassemblyjs/ast\").NodePath<T>} NodePath\n */\n\n/**\n * @typedef {(buf: ArrayBuffer) => ArrayBuffer} ArrayBufferTransform\n */\n\n/**\n * @template T\n * @param {((prev: ArrayBuffer) => ArrayBuffer)[]} fns transforms\n * @returns {Function} composed transform\n */\nconst compose = (...fns) =>\n\tfns.reduce(\n\t\t(prevFn, nextFn) => value => nextFn(prevFn(value)),\n\t\tvalue => value\n\t);\n\n/**\n * Removes the start instruction\n * @param {object} state state\n * @param {object} state.ast Module's ast\n * @returns {ArrayBufferTransform} transform\n */\nconst removeStartFunc = state => bin =>\n\teditWithAST(state.ast, bin, {\n\t\tStart(path) {\n\t\t\tpath.remove();\n\t\t}\n\t});\n\n/**\n * Get imported globals\n * @param {object} ast Module's AST\n * @returns {t.ModuleImport[]} - nodes\n */\nconst getImportedGlobals = ast => {\n\t/** @type {t.ModuleImport[]} */\n\tconst importedGlobals = [];\n\n\tt.traverse(ast, {\n\t\tModuleImport({ node }) {\n\t\t\tif (t.isGlobalType(node.descr)) {\n\t\t\t\timportedGlobals.push(node);\n\t\t\t}\n\t\t}\n\t});\n\n\treturn importedGlobals;\n};\n\n/**\n * Get the count for imported func\n * @param {object} ast Module's AST\n * @returns {number} - count\n */\nconst getCountImportedFunc = ast => {\n\tlet count = 0;\n\n\tt.traverse(ast, {\n\t\tModuleImport({ node }) {\n\t\t\tif (t.isFuncImportDescr(node.descr)) {\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t});\n\n\treturn count;\n};\n\n/**\n * Get next type index\n * @param {object} ast Module's AST\n * @returns {t.Index} - index\n */\nconst getNextTypeIndex = ast => {\n\tconst typeSectionMetadata = t.getSectionMetadata(ast, \"type\");\n\n\tif (typeSectionMetadata === undefined) {\n\t\treturn t.indexLiteral(0);\n\t}\n\n\treturn t.indexLiteral(typeSectionMetadata.vectorOfSize.value);\n};\n\n/**\n * Get next func index\n * The Func section metadata provide information for implemented funcs\n * in order to have the correct index we shift the index by number of external\n * functions.\n * @param {object} ast Module's AST\n * @param {number} countImportedFunc number of imported funcs\n * @returns {t.Index} - index\n */\nconst getNextFuncIndex = (ast, countImportedFunc) => {\n\tconst funcSectionMetadata = t.getSectionMetadata(ast, \"func\");\n\n\tif (funcSectionMetadata === undefined) {\n\t\treturn t.indexLiteral(0 + countImportedFunc);\n\t}\n\n\tconst vectorOfSize = funcSectionMetadata.vectorOfSize.value;\n\n\treturn t.indexLiteral(vectorOfSize + countImportedFunc);\n};\n\n/**\n * Creates an init instruction for a global type\n * @param {t.GlobalType} globalType the global type\n * @returns {t.Instruction} init expression\n */\nconst createDefaultInitForGlobal = globalType => {\n\tif (globalType.valtype[0] === \"i\") {\n\t\t// create NumberLiteral global initializer\n\t\treturn t.objectInstruction(\"const\", globalType.valtype, [\n\t\t\tt.numberLiteralFromRaw(66)\n\t\t]);\n\t} else if (globalType.valtype[0] === \"f\") {\n\t\t// create FloatLiteral global initializer\n\t\treturn t.objectInstruction(\"const\", globalType.valtype, [\n\t\t\tt.floatLiteral(66, false, false, \"66\")\n\t\t]);\n\t}\n\tthrow new Error(`unknown type: ${globalType.valtype}`);\n};\n\n/**\n * Rewrite the import globals:\n * - removes the ModuleImport instruction\n * - injects at the same offset a mutable global of the same type\n *\n * Since the imported globals are before the other global declarations, our\n * indices will be preserved.\n *\n * Note that globals will become mutable.\n * @param {object} state transformation state\n * @param {object} state.ast Module's ast\n * @param {t.Instruction[]} state.additionalInitCode list of addition instructions for the init function\n * @returns {ArrayBufferTransform} transform\n */\nconst rewriteImportedGlobals = state => bin => {\n\tconst additionalInitCode = state.additionalInitCode;\n\t/** @type {Array<t.Global>} */\n\tconst newGlobals = [];\n\n\tbin = editWithAST(state.ast, bin, {\n\t\tModuleImport(path) {\n\t\t\tif (t.isGlobalType(path.node.descr)) {\n\t\t\t\tconst globalType = /** @type {TODO} */ (path.node.descr);\n\n\t\t\t\tglobalType.mutability = \"var\";\n\n\t\t\t\tconst init = [\n\t\t\t\t\tcreateDefaultInitForGlobal(globalType),\n\t\t\t\t\tt.instruction(\"end\")\n\t\t\t\t];\n\n\t\t\t\tnewGlobals.push(t.global(globalType, init));\n\n\t\t\t\tpath.remove();\n\t\t\t}\n\t\t},\n\n\t\t// in order to preserve non-imported global's order we need to re-inject\n\t\t// those as well\n\t\t/**\n\t\t * @param {NodePath<Global>} path path\n\t\t */\n\t\tGlobal(path) {\n\t\t\tconst { node } = path;\n\t\t\tconst [init] = node.init;\n\n\t\t\tif (init.id === \"get_global\") {\n\t\t\t\tnode.globalType.mutability = \"var\";\n\n\t\t\t\tconst initialGlobalIdx = init.args[0];\n\n\t\t\t\tnode.init = [\n\t\t\t\t\tcreateDefaultInitForGlobal(node.globalType),\n\t\t\t\t\tt.instruction(\"end\")\n\t\t\t\t];\n\n\t\t\t\tadditionalInitCode.push(\n\t\t\t\t\t/**\n\t\t\t\t\t * get_global in global initializer only works for imported globals.\n\t\t\t\t\t * They have the same indices as the init params, so use the\n\t\t\t\t\t * same index.\n\t\t\t\t\t */\n\t\t\t\t\tt.instruction(\"get_local\", [initialGlobalIdx]),\n\t\t\t\t\tt.instruction(\"set_global\", [t.indexLiteral(newGlobals.length)])\n\t\t\t\t);\n\t\t\t}\n\n\t\t\tnewGlobals.push(node);\n\n\t\t\tpath.remove();\n\t\t}\n\t});\n\n\t// Add global declaration instructions\n\treturn addWithAST(state.ast, bin, newGlobals);\n};\n\n/**\n * Rewrite the export names\n * @param {object} state state\n * @param {object} state.ast Module's ast\n * @param {Module} state.module Module\n * @param {ModuleGraph} state.moduleGraph module graph\n * @param {Set<string>} state.externalExports Module\n * @param {RuntimeSpec} state.runtime runtime\n * @returns {ArrayBufferTransform} transform\n */\nconst rewriteExportNames =\n\t({ ast, moduleGraph, module, externalExports, runtime }) =>\n\tbin =>\n\t\teditWithAST(ast, bin, {\n\t\t\t/**\n\t\t\t * @param {NodePath<ModuleExport>} path path\n\t\t\t */\n\t\t\tModuleExport(path) {\n\t\t\t\tconst isExternal = externalExports.has(path.node.name);\n\t\t\t\tif (isExternal) {\n\t\t\t\t\tpath.remove();\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tconst usedName = moduleGraph\n\t\t\t\t\t.getExportsInfo(module)\n\t\t\t\t\t.getUsedName(path.node.name, runtime);\n\t\t\t\tif (!usedName) {\n\t\t\t\t\tpath.remove();\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tpath.node.name = /** @type {string} */ (usedName);\n\t\t\t}\n\t\t});\n\n/**\n * Mangle import names and modules\n * @param {object} state state\n * @param {object} state.ast Module's ast\n * @param {Map<string, UsedWasmDependency>} state.usedDependencyMap mappings to mangle names\n * @returns {ArrayBufferTransform} transform\n */\nconst rewriteImports =\n\t({ ast, usedDependencyMap }) =>\n\tbin =>\n\t\teditWithAST(ast, bin, {\n\t\t\t/**\n\t\t\t * @param {NodePath<ModuleImport>} path path\n\t\t\t */\n\t\t\tModuleImport(path) {\n\t\t\t\tconst result = usedDependencyMap.get(\n\t\t\t\t\t`${path.node.module}:${path.node.name}`\n\t\t\t\t);\n\n\t\t\t\tif (result !== undefined) {\n\t\t\t\t\tpath.node.module = result.module;\n\t\t\t\t\tpath.node.name = result.name;\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n/**\n * Add an init function.\n *\n * The init function fills the globals given input arguments.\n * @param {object} state transformation state\n * @param {object} state.ast Module's ast\n * @param {t.Identifier} state.initFuncId identifier of the init function\n * @param {t.Index} state.startAtFuncOffset index of the start function\n * @param {t.ModuleImport[]} state.importedGlobals list of imported globals\n * @param {t.Instruction[]} state.additionalInitCode list of addition instructions for the init function\n * @param {t.Index} state.nextFuncIndex index of the next function\n * @param {t.Index} state.nextTypeIndex index of the next type\n * @returns {ArrayBufferTransform} transform\n */\nconst addInitFunction =\n\t({\n\t\tast,\n\t\tinitFuncId,\n\t\tstartAtFuncOffset,\n\t\timportedGlobals,\n\t\tadditionalInitCode,\n\t\tnextFuncIndex,\n\t\tnextTypeIndex\n\t}) =>\n\tbin => {\n\t\tconst funcParams = importedGlobals.map(importedGlobal => {\n\t\t\t// used for debugging\n\t\t\tconst id = t.identifier(\n\t\t\t\t`${importedGlobal.module}.${importedGlobal.name}`\n\t\t\t);\n\n\t\t\treturn t.funcParam(\n\t\t\t\t/** @type {string} */ (importedGlobal.descr.valtype),\n\t\t\t\tid\n\t\t\t);\n\t\t});\n\n\t\t/** @type {Instruction[]} */\n\t\tconst funcBody = [];\n\t\tfor (const [index, _importedGlobal] of importedGlobals.entries()) {\n\t\t\tconst args = [t.indexLiteral(index)];\n\t\t\tconst body = [\n\t\t\t\tt.instruction(\"get_local\", args),\n\t\t\t\tt.instruction(\"set_global\", args)\n\t\t\t];\n\n\t\t\tfuncBody.push(...body);\n\t\t}\n\n\t\tif (typeof startAtFuncOffset === \"number\") {\n\t\t\tfuncBody.push(\n\t\t\t\tt.callInstruction(t.numberLiteralFromRaw(startAtFuncOffset))\n\t\t\t);\n\t\t}\n\n\t\tfor (const instr of additionalInitCode) {\n\t\t\tfuncBody.push(instr);\n\t\t}\n\n\t\tfuncBody.push(t.instruction(\"end\"));\n\n\t\t/** @type {string[]} */\n\t\tconst funcResults = [];\n\n\t\t// Code section\n\t\tconst funcSignature = t.signature(funcParams, funcResults);\n\t\tconst func = t.func(initFuncId, funcSignature, funcBody);\n\n\t\t// Type section\n\t\tconst functype = t.typeInstruction(undefined, funcSignature);\n\n\t\t// Func section\n\t\tconst funcindex = t.indexInFuncSection(nextTypeIndex);\n\n\t\t// Export section\n\t\tconst moduleExport = t.moduleExport(\n\t\t\tinitFuncId.value,\n\t\t\tt.moduleExportDescr(\"Func\", nextFuncIndex)\n\t\t);\n\n\t\treturn addWithAST(ast, bin, [func, moduleExport, funcindex, functype]);\n\t};\n\n/**\n * Extract mangle mappings from module\n * @param {ModuleGraph} moduleGraph module graph\n * @param {Module} module current module\n * @param {boolean | undefined} mangle mangle imports\n * @returns {Map<string, UsedWasmDependency>} mappings to mangled names\n */\nconst getUsedDependencyMap = (moduleGraph, module, mangle) => {\n\t/** @type {Map<string, UsedWasmDependency>} */\n\tconst map = new Map();\n\tfor (const usedDep of WebAssemblyUtils.getUsedDependencies(\n\t\tmoduleGraph,\n\t\tmodule,\n\t\tmangle\n\t)) {\n\t\tconst dep = usedDep.dependency;\n\t\tconst request = dep.request;\n\t\tconst exportName = dep.name;\n\t\tmap.set(`${request}:${exportName}`, usedDep);\n\t}\n\treturn map;\n};\n\n/**\n * @typedef {object} WebAssemblyGeneratorOptions\n * @property {boolean} [mangleImports] mangle imports\n */\n\nclass WebAssemblyGenerator extends Generator {\n\t/**\n\t * @param {WebAssemblyGeneratorOptions} options options\n\t */\n\tconstructor(options) {\n\t\tsuper();\n\t\tthis.options = options;\n\t}\n\n\t/**\n\t * @param {NormalModule} module fresh module\n\t * @returns {SourceTypes} available types (do not mutate)\n\t */\n\tgetTypes(module) {\n\t\treturn WEBASSEMBLY_TYPES;\n\t}\n\n\t/**\n\t * @param {NormalModule} module the module\n\t * @param {string=} type source type\n\t * @returns {number} estimate size of the module\n\t */\n\tgetSize(module, type) {\n\t\tconst originalSource = module.originalSource();\n\t\tif (!originalSource) {\n\t\t\treturn 0;\n\t\t}\n\t\treturn originalSource.size();\n\t}\n\n\t/**\n\t * @param {NormalModule} module module for which the code should be generated\n\t * @param {GenerateContext} generateContext context for generate\n\t * @returns {Source | null} generated code\n\t */\n\tgenerate(module, { moduleGraph, runtime }) {\n\t\tconst bin = /** @type {Source} */ (module.originalSource()).source();\n\n\t\tconst initFuncId = t.identifier(\"\");\n\n\t\t// parse it\n\t\tconst ast = decode(bin, {\n\t\t\tignoreDataSection: true,\n\t\t\tignoreCodeSection: true,\n\t\t\tignoreCustomNameSection: true\n\t\t});\n\n\t\tconst moduleContext = moduleContextFromModuleAST(ast.body[0]);\n\n\t\tconst importedGlobals = getImportedGlobals(ast);\n\t\tconst countImportedFunc = getCountImportedFunc(ast);\n\t\tconst startAtFuncOffset = moduleContext.getStart();\n\t\tconst nextFuncIndex = getNextFuncIndex(ast, countImportedFunc);\n\t\tconst nextTypeIndex = getNextTypeIndex(ast);\n\n\t\tconst usedDependencyMap = getUsedDependencyMap(\n\t\t\tmoduleGraph,\n\t\t\tmodule,\n\t\t\tthis.options.mangleImports\n\t\t);\n\t\tconst externalExports = new Set(\n\t\t\tmodule.dependencies\n\t\t\t\t.filter(d => d instanceof WebAssemblyExportImportedDependency)\n\t\t\t\t.map(d => {\n\t\t\t\t\tconst wasmDep = /** @type {WebAssemblyExportImportedDependency} */ (\n\t\t\t\t\t\td\n\t\t\t\t\t);\n\t\t\t\t\treturn wasmDep.exportName;\n\t\t\t\t})\n\t\t);\n\n\t\t/** @type {t.Instruction[]} */\n\t\tconst additionalInitCode = [];\n\n\t\tconst transform = compose(\n\t\t\trewriteExportNames({\n\t\t\t\tast,\n\t\t\t\tmoduleGraph,\n\t\t\t\tmodule,\n\t\t\t\texternalExports,\n\t\t\t\truntime\n\t\t\t}),\n\n\t\t\tremoveStartFunc({ ast }),\n\n\t\t\trewriteImportedGlobals({ ast, additionalInitCode }),\n\n\t\t\trewriteImports({\n\t\t\t\tast,\n\t\t\t\tusedDependencyMap\n\t\t\t}),\n\n\t\t\taddInitFunction({\n\t\t\t\tast,\n\t\t\t\tinitFuncId,\n\t\t\t\timportedGlobals,\n\t\t\t\tadditionalInitCode,\n\t\t\t\tstartAtFuncOffset,\n\t\t\t\tnextFuncIndex,\n\t\t\t\tnextTypeIndex\n\t\t\t})\n\t\t);\n\n\t\tconst newBin = transform(bin);\n\n\t\tconst newBuf = Buffer.from(newBin);\n\n\t\treturn new RawSource(newBuf);\n\t}\n}\n\nmodule.exports = WebAssemblyGenerator;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}